#!/usr/bin/env python3

import subprocess
import os
import sys


PROJECT_ROOT = os.path.expanduser("~/src")


def build_project_list():
    dirs = ["tmux:"+x for x in tmux_sessions()]
    for customer in os.listdir(PROJECT_ROOT):
        if os.path.isfile(os.path.join(PROJECT_ROOT, customer)):
            continue
        for project_folder in os.listdir(os.path.join(PROJECT_ROOT, customer)):
            path = os.path.join(PROJECT_ROOT, customer, project_folder)
            if os.path.isdir(path):
                dirs.append(customer + "/" + project_folder)
    return dirs


def run(args):
    return subprocess.run(args, encoding="UTF-8", capture_output=True)


def exec(args):
    run(args)
    exit(0)


def start_session(path, project):
    run([tmux, 'new-session', '-d', '-c', path, '-s', project])
    exec_session(project)


def exec_session(project):
    if in_tmux:
        exec([tmux, 'switch-client', '-t', project])
    else:
        exec([tmux, 'attach-session', '-t', project])


def tmux_sessions():
    ret = run([tmux, 'list-sessions'])
    if ret.returncode != 0:
        print("failed to list tmux sessions")
        # exit(1)
        return []
    sessions = ret.stdout.split("\n")
    return [x.split(':')[0].strip() for x in sessions if ":" in x]


def open_project(project):
    if project.startswith("tmux:"):
        project = project.replace("tmux:", "", 1)
        exec_session(project)
        
    project_parts = project.split('/')

    if project in tmux_sessions():
        exec_session(project)

    if len(project_parts) > 1:
        full_project_path = os.path.join(PROJECT_ROOT, project)
        if os.path.exists(full_project_path):
            start_session(full_project_path, project)
        else:
            print("Project not found")
            exit(1)

    dirs = []
    for customer in os.listdir(PROJECT_ROOT):
        if os.path.isfile(os.path.join(PROJECT_ROOT, customer)):
            continue
        for project_folder in os.listdir(os.path.join(PROJECT_ROOT, customer)):
            path = os.path.join(PROJECT_ROOT, customer, project_folder)
            if project_folder == project and os.path.isdir(path):
                dirs.append(path)

    if len(dirs) > 1:
        print("Project name is ambiguous. Found:")
        for dir in dirs:
            print("  ", dir)
        exit(1)

    if len(dirs) == 0:
        print("Project not found")
        exit(1)

    start_session(dirs[0], project)


tmux_var = os.environ.get("TMUX")
in_tmux = tmux_var is not None and tmux_var.strip() != ""

ret = run(["which", "tmux"])
if ret.returncode != 0:
    print("tmux is not on path")
    exit(1)

tmux = ret.stdout.strip()

if len(sys.argv) < 2:
    exec_line = "enter:execute(%s {})+accept" % os.path.abspath(sys.argv[0])
    projects = build_project_list()
    input_buffer = "\n".join(projects)
    ret = subprocess.run(['fzf', '--bind', exec_line], input=input_buffer, encoding="UTF-8")
    exit(0)

project = str(sys.argv[1])
open_project(project)

