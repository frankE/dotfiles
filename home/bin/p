#!/usr/bin/env python3

import subprocess
import os
import sys


PROJECT_ROOT = os.path.expanduser("~/src")


def build_project_list(tmux):
    if tmux is not None:
        dirs = ["tmux:"+x for x in tmux_sessions(tmux)]
    else:
        dirs = []
    for customer in os.listdir(PROJECT_ROOT):
        if os.path.isfile(os.path.join(PROJECT_ROOT, customer)):
            continue
        for project_folder in os.listdir(os.path.join(PROJECT_ROOT, customer)):
            path = os.path.join(PROJECT_ROOT, customer, project_folder)
            if os.path.isdir(path):
                dirs.append(customer + "/" + project_folder)
    return dirs


def run(args):
    return subprocess.run(args, encoding="UTF-8", capture_output=True)


def is_tmux_active():
    tmux_var = os.environ.get("TMUX")
    return tmux_var is not None and tmux_var.strip() != ""


def tmux_sessions(tmux):
    ret = run([tmux, 'list-sessions'])
    if ret.returncode != 0:
        return []
    sessions = ret.stdout.split("\n")
    return [x.split(':')[0].strip() for x in sessions if ":" in x]


def get_project_path(project):
    dirs = []
    for customer in os.listdir(PROJECT_ROOT):
        customer_folder = os.path.join(PROJECT_ROOT, customer)
        if os.path.isfile(customer_folder):
            continue
        for project_folder in os.listdir(customer_folder):
            path = os.path.join(customer_folder, project_folder)
            if (customer + "/" + project_folder == project or project_folder == project) and os.path.isdir(path):
                dirs.append((customer + "/" + project_folder, path))
    return dirs


def which(binary):
    ret = run(["which", binary])
    if ret.returncode != 0:
        return None
    return ret.stdout.strip()


class TMuxHandler(object):
    def __init__(self):
        self.tmux = which("tmux")

    def handle(self, project, path):
        if self.tmux is None:
            return None

        if project.startswith("tmux:"):
            project = project.replace("tmux:", "", 1)
        if project not in tmux_sessions(self.tmux):
            return None
        if is_tmux_active():
            ret = subprocess.run([self.tmux, 'switch-client', '-t', project])
        else:
            ret = subprocess.run([self.tmux, 'attach-session', '-t', project])
        return ret.returncode


class FolderHandler(object):
    def __init__(self):
        self.tmux = which("tmux")

    def handle(self, project, path=None):
        if self.tmux is None:
            return None
        if path is None:
            return None
        ret = subprocess.run([self.tmux, 'new-session', '-d', '-c', path, '-s', project])
        if ret.returncode != 0:
            return ret.returncode
        if is_tmux_active():
            ret = subprocess.run([self.tmux, 'switch-client', '-t', project])
        else:
            ret = subprocess.run([self.tmux, 'attach-session', '-t', project])
        return ret.returncode

        
class TMuxPHandler(object):
    def __init__(self):
        self.tmuxp = which("tmuxp")

    def handle(self, project, path=None):
        if self.tmuxp is None:
            return None
        if path is None:
            return None
        if not (os.path.isfile(os.path.join(path, '.tmuxp.yaml')) and os.path.isfile(os.path.join(path, '.tmuxp.json'))):
            return None

        ret = subprocess.run(['tmuxp', 'load', '-y', '-s', project, path], stdin=sys.stdin, stdout=sys.stdout, stderr=sys.stderr)
        return ret.returncode


class FzfHandler(object):
    def __init__(self):
        self.fzf = which("fzf")
        self.tmux = which("tmux")

    def handle(self, project=None, path=None):
        if self.fzf is None:
            return None
        project = "" if project is None else project
        projects = build_project_list(self.tmux)
        input_buffer = "\n".join(projects)
        proc = subprocess.Popen([self.fzf, '+m', '-q', project], encoding="UTF-8", stdout=subprocess.PIPE, stdin=subprocess.PIPE)
        out, err = proc.communicate(input=input_buffer)
        if proc.returncode != 0:
            return proc.returncode
        project = out.strip()
        return project


def get_project_path_checked(project):
        dirs = get_project_path(project)
        print(len(dirs))
        if len(dirs) > 1:
            print("Projectname is ambiguous: ")
            for p, f in dirs:
                print("  ", p)
            exit(1)
        elif len(dirs) == 1:
            return dirs[0]
        return project, None


if __name__ == "__main__":
    handlers = [TMuxHandler(), TMuxPHandler(), FolderHandler(), FzfHandler()]
    project = ""
    path = None
    if len(sys.argv) > 1:
        project = str(sys.argv[1]).strip()
    loop = True
    while loop:
        loop = False
        project, path = get_project_path_checked(project)
        print(project, path)
        for handler in handlers:
            ret = handler.handle(project, path) 
            if ret is not None and type(ret) is int:
                exit(ret)
            if type(ret) is str:  # str return type means we have a new project name
                project = ret.strip()
                loop = True
                break

